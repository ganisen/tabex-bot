"""
–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –ì–æ—Ä–æ–¥—Å–∫–æ–π –°—Ç—Ä–∞–∂–∏.

–ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å –ª–∏—á–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏—ë–º–∞ —Ç–∞–±–ª–µ—Ç–æ–∫
–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.
"""
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class VimesReminderService:
    """
    –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –í–∞–π–º—Å–∞.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ —Ç–∞–±–ª–µ—Ç–æ–∫ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É–∂–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        self.active_reminders: Dict[int, bool] = {}
        self.user_schedules: Dict[int, str] = {}
        logger.info("–ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å –≥–æ—Ç–æ–≤ –∫ –Ω–µ—Å–µ–Ω–∏—é —Å–ª—É–∂–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    async def start_reminder_for_user(self, user_id: int, first_dose_time: str, context: ContextTypes.DEFAULT_TYPE):
        """
        –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            first_dose_time: –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏—ë–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            self.active_reminders[user_id] = True
            self.user_schedules[user_id] = first_dose_time
            
            logger.info(f"–ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å –Ω–∞—á–∞–ª –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å {first_dose_time}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏—ë–º–∞
            await self._schedule_next_reminder(user_id, first_dose_time, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def stop_reminder_for_user(self, user_id: int):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        """
        try:
            self.active_reminders[user_id] = False
            if user_id in self.user_schedules:
                del self.user_schedules[user_id]
            
            logger.info(f"–ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _schedule_next_reminder(self, user_id: int, base_time: str, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            base_time: –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not self.active_reminders.get(user_id, False):
            return
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
            now = datetime.now()
            base_dt = datetime.strptime(base_time, "%H:%M").time()
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∫—Ä–∞—Ç–Ω—ã–π 2 —á–∞—Å–∞–º –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            next_reminder = datetime.combine(now.date(), base_dt)
            
            while next_reminder <= now:
                next_reminder += timedelta(hours=2)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            delay_seconds = (next_reminder - now).total_seconds()
            
            logger.info(f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {next_reminder.strftime('%H:%M')} (—á–µ—Ä–µ–∑ {delay_seconds/60:.1f} –º–∏–Ω)")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await asyncio.sleep(delay_seconds)
            
            if self.active_reminders.get(user_id, False):
                await self._send_reminder(user_id, context)
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await self._schedule_next_reminder(user_id, base_time, context)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _send_reminder(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        vimes_reminder = """
üè¥‚Äç‚ò†Ô∏è **–ì–æ—Ä–æ–¥—Å–∫–∞—è –°—Ç—Ä–∞–∂–∞ –Ω–∞ —Å–≤—è–∑–∏!**

‚è∞ **–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –¢–∞–±–µ–∫—Å–∞.**

–ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ë–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –±–µ–∑ –æ—Ç–≥–æ–≤–æ—Ä–æ–∫, –±–µ–∑ "–∑–∞–±—ã–ª".

üìã **–¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:**
1. –ü—Ä–∏–º–∏ —Ç–∞–±–ª–µ—Ç–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
2. –û—Ç–≤–µ—Ç—å "–ø—Ä–∏–Ω—è–ª" –∏–ª–∏ "–≥–æ—Ç–æ–≤–æ"  
3. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ç—Ä—É–ª—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞

*"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - —ç—Ç–æ –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Ç–µ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–µ–π—á–∞—Å, –∏ —Ç–µ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ."*

‚Äî –ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å, –ì–æ—Ä–æ–¥—Å–∫–∞—è –°—Ç—Ä–∞–∂–∞ –ê–Ω–∫-–ú–æ—Ä–ø–æ—Ä–∫–∞

**P.S.** –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –º–µ–Ω—è –ø–æ—Å—ã–ª–∞—Ç—å –∑–∞ —Ç–æ–±–æ–π –∫–æ–Ω—Å—Ç–µ–±–ª—è –ú–æ—Ä–∫–æ—É.
"""
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=vimes_reminder,
                parse_mode='Markdown'
            )
            logger.info(f"–ö–∞–ø–∏—Ç–∞–Ω –í–∞–π–º—Å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def get_active_reminders_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        return sum(1 for active in self.active_reminders.values() if active)
    
    def is_user_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.active_reminders.get(user_id, False)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
vimes_service = VimesReminderService()

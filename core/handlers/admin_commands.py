"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞.

–ü–æ–∑–≤–æ–ª—è—é—Ç –±—ã—Å—Ç—Ä–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è,
–ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.
"""
import logging
from datetime import datetime, date, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.models.treatment import TreatmentCourse, TreatmentStatus
from core.models.user import User
from core.services.character_service import character_service
from core.services.schedule_service import schedule_service
from core.services.reminder_service import reminder_service
from database.repositories import UserRepository, TreatmentRepository, TabexRepository
from config.tabex_phases import phase_manager, TABEX_PHASES_CONFIG

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
ADMIN_ID = 5700485536  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à Telegram ID

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID


async def admin_jump_day_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å –∫—É—Ä—Å–∞.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_jump_day 15
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        args = context.args
        if not args:
            await update.message.reply_text(
                "üìã **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/admin_jump_day <–¥–µ–Ω—å>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/admin_jump_day 15`\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: 1-25",
                parse_mode='Markdown'
            )
            return
        
        target_day = int(args[0])
        if not 1 <= target_day <= 25:
            await update.message.reply_text("‚ùå –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 25")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞
        user_repo = UserRepository()
        treatment_repo = TreatmentRepository()
        
        user_obj = await user_repo.get_by_telegram_id(user.id)
        if not user_obj:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        course = await treatment_repo.get_active_by_user_id(user_obj.user_id)
        if not course:
            await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        new_start_date = date.today() - timedelta(days=target_day - 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å
        course.start_date = new_start_date
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–∞–∑—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        phase_config = phase_manager.get_phase_for_day(target_day)
        if phase_config:
            course.current_phase = phase_config.phase_number
            course.current_character = phase_config.character
        
        await treatment_repo.update(course)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        current_character = character_service.get_current_character(course)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è 5-–≥–æ –¥–Ω—è
        special_info = ""
        if target_day == 5:
            if not course.smoking_quit_date:
                course.smoking_quit_date = new_start_date + timedelta(days=4)
                await treatment_repo.update(course)
            special_info = "\nüö≠ **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ù–¨: –ø–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ –æ—Ç –∫—É—Ä–µ–Ω–∏—è!**"
        
        result_message = f"""
üîß **–ê–î–ú–ò–ù: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ–Ω—å {target_day}**

‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.first_name}**

üìÖ **–ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {new_start_date.strftime('%d.%m.%Y')}
üìä **–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å:** {target_day}/25
üé≠ **–§–∞–∑–∞:** {course.current_phase}
üë§ **–ü–µ—Ä—Å–æ–Ω–∞–∂:** {current_character.name} {current_character.emoji}
{special_info}

*"–í—Ä–µ–º—è - —ç—Ç–æ –∏–ª–ª—é–∑–∏—è. –û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è - —Ç–µ–º –±–æ–ª–µ–µ."*

‚Äî –ê–¥–º–∏–Ω –í—Ä–µ–º–µ–Ω–∏ (–º–∞–Ω–∏–ø—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é)
"""
        
        await update.message.reply_text(result_message, parse_mode='Markdown')
        logger.info(f"–ê–¥–º–∏–Ω –ø–µ—Ä–µ–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ –¥–µ–Ω—å {target_day}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_jump_day: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def admin_set_phase_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–∑—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_set_phase 3
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        args = context.args
        if not args:
            phase_list = phase_manager.get_phase_summary()
            phases_text = "\n".join([f"**{num}**: {desc}" for num, desc in phase_list.items()])
            
            await update.message.reply_text(
                f"üìã **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/admin_set_phase <–Ω–æ–º–µ—Ä_—Ñ–∞–∑—ã>`\n\n"
                f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–∑—ã:**\n{phases_text}\n\n"
                f"–ü—Ä–∏–º–µ—Ä: `/admin_set_phase 3`",
                parse_mode='Markdown'
            )
            return
        
        target_phase = int(args[0])
        if target_phase not in TABEX_PHASES_CONFIG:
            await update.message.reply_text("‚ùå –§–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞
        user_repo = UserRepository()
        treatment_repo = TreatmentRepository()
        
        user_obj = await user_repo.get_by_telegram_id(user.id)
        if not user_obj:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        course = await treatment_repo.get_active_by_user_id(user_obj.user_id)
        if not course:
            await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        phase_config = TABEX_PHASES_CONFIG[target_phase]
        course.current_phase = target_phase
        course.current_character = phase_config.character
        
        await treatment_repo.update(course)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        current_character = character_service.get_current_character(course)
        
        result_message = f"""
üîß **–ê–î–ú–ò–ù: –°–º–µ–Ω–∞ —Ñ–∞–∑—ã**

‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.first_name}**

üé≠ **–ù–æ–≤–∞—è —Ñ–∞–∑–∞:** {target_phase}
üë§ **–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:** {current_character.name} {current_character.emoji}
‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–µ–º–∞:** –∫–∞–∂–¥—ã–µ {phase_config.interval_hours}—á
üíä **–¢–∞–±–ª–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å:** {phase_config.doses_per_day}
üìñ **–û–ø–∏—Å–∞–Ω–∏–µ:** {phase_config.description}

*"–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥—á–∏–Ω–∏—Ç—å—Å—è."*

‚Äî –ê–¥–º–∏–Ω –§–∞–∑ (—É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏)
"""
        
        await update.message.reply_text(result_message, parse_mode='Markdown')
        logger.info(f"–ê–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ñ–∞–∑—É {target_phase} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–∑—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_set_phase: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def admin_test_gender_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–¥–µ—Ä–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∫–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º.
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_repo = UserRepository()
        user_obj = await user_repo.get_by_telegram_id(user.id)
        
        if not user_obj:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characters = [
            ("–ì–∞—Å–ø–æ–¥", "gaspode", 1),
            ("–®–Ω–æ–±–±–∏ –∏ –ö–æ–ª–æ–Ω", "nobby_colon", 2),
            ("–ê–Ω–≥–≤–∞", "angua", 3),
            ("–ú–æ—Ä–∫–æ—É", "carrot", 4),
            ("–í–∞–π–º—Å", "vimes", 5),
            ("–í–∏—Ç–∏–Ω–∞—Ä–∏", "vetinari", 6),
            ("–°–ú–ï–†–¢–¨", "death", 7)
        ]
        
        keyboard = []
        for name, char_id, num in characters:
            keyboard.append([InlineKeyboardButton(f"{num}. {name}", callback_data=f"test_gender_{char_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        test_info = f"""
üîß **–ê–î–ú–ò–ù: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤**

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–¥–µ—Ä–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

**–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ–ª:** {'–ú—É–∂—Å–∫–æ–π' if user_obj.is_male() else '–ñ–µ–Ω—Å–∫–∏–π'}

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã:
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–∑–µ
‚Ä¢ –ü–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ

*"–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä—è—Ç."*

‚Äî –ê–¥–º–∏–Ω –ì–µ–Ω–¥–µ—Ä–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å)
"""
        
        await update.message.reply_text(
            test_info,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_test_gender: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def admin_simulate_full_course_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è.
    
    –ü—Ä–æ–≤–æ–¥–∏—Ç –∫—É—Ä—Å –æ—Ç 1 –¥–æ 25 –¥–Ω—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞
        user_repo = UserRepository()
        treatment_repo = TreatmentRepository()
        
        user_obj = await user_repo.get_by_telegram_id(user.id)
        if not user_obj:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        course = await treatment_repo.get_active_by_user_id(user_obj.user_id)
        if not course:
            await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üöÄ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è (–∫–ª—é—á–µ–≤—ã–µ –¥–Ω–∏)", callback_data="sim_fast")],
            [InlineKeyboardButton("üìã –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è (–≤—Å–µ 25 –¥–Ω–µ–π)", callback_data="sim_full")],
            [InlineKeyboardButton("üé≠ –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", callback_data="sim_characters")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        sim_info = f"""
üîß **–ê–î–ú–ò–ù: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞**

–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è –¥–ª—è **{user_obj.first_name}** ({'–ú' if user_obj.is_male() else '–ñ'}).

**–†–µ–∂–∏–º—ã —Å–∏–º—É–ª—è—Ü–∏–∏:**

üöÄ **–ë—ã—Å—Ç—Ä–∞—è** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ 1, 5, 13, 17, 21, 25 (–ø–µ—Ä–µ—Ö–æ–¥—ã + –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å)

üìã **–ü–æ–ª–Ω–∞—è** ‚Äî –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—Å–µ 25 –¥–Ω–µ–π —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞

üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞

*"–í—Ä–µ–º—è - —ç—Ç–æ —á–µ—Ç–≤–µ—Ä—Ç–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ. –ù–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –≤—Å–µ–≥–æ –ª–∏—à—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è."*

‚Äî –ê–¥–º–∏–Ω –°–∏–º—É–ª—è—Ç–æ—Ä (–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏)
"""
        
        await update.message.reply_text(
            sim_info,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_simulate_full_course: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def admin_reset_course_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –∫ –ø–µ—Ä–≤–æ–º—É –¥–Ω—é.
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞
        user_repo = UserRepository()
        treatment_repo = TreatmentRepository()
        tabex_repo = TabexRepository()
        
        user_obj = await user_repo.get_by_telegram_id(user.id)
        if not user_obj:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        course = await treatment_repo.get_active_by_user_id(user_obj.user_id)
        if not course:
            await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start")
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å –∫ –Ω–∞—á–∞–ª—É
        course.start_date = date.today()
        course.current_phase = 1
        course.current_character = 'gaspode'
        course.smoking_quit_date = None
        
        await treatment_repo.update(course)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–≥–∏ –ø—Ä–∏–µ–º–æ–≤
        await tabex_repo.delete_all_logs_for_user(user_obj.user_id)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        await reminder_service.stop_reminders_for_user(user.id)
        
        result_message = f"""
üîß **–ê–î–ú–ò–ù: –°–±—Ä–æ—Å –∫—É—Ä—Å–∞**

‚úÖ **–ö—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.first_name} —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—É**

üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {course.start_date.strftime('%d.%m.%Y')} (—Å–µ–≥–æ–¥–Ω—è)
üìä **–î–µ–Ω—å:** 1/25
üé≠ **–§–∞–∑–∞:** 1 (–ù–∞—á–∞–ª—å–Ω–∞—è)
üë§ **–ü–µ—Ä—Å–æ–Ω–∞–∂:** –ì–∞—Å–ø–æ–¥ üê∫
üóëÔ∏è **–£–¥–∞–ª–µ–Ω—ã:** –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–µ–º–æ–≤
‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã

**–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞.**

*"–ö–∞–∂–¥—ã–π –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å. –ò —Ç—Ä–µ—Ç–∏–π. –ò —á–µ—Ç–≤–µ—Ä—Ç—ã–π..."*

‚Äî –ê–¥–º–∏–Ω –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑—á–∏–∫ (–º–∞—Å—Ç–µ—Ä –Ω–æ–≤—ã—Ö –Ω–∞—á–∞–ª)
"""
        
        await update.message.reply_text(result_message, parse_mode='Markdown')
        logger.info(f"–ê–¥–º–∏–Ω —Å–±—Ä–æ—Å–∏–ª –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_reset_course: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def admin_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    help_text = """
üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –¢–ê–ë–ï–ö–°-–ë–û–¢–ê**

**–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫—É—Ä—Å—É:**
`/admin_jump_day <–¥–µ–Ω—å>` ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å (1-25)
`/admin_set_phase <—Ñ–∞–∑–∞>` ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–∞–∑—É (1-5)
`/admin_reset_course` ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å –∫ –ø–µ—Ä–≤–æ–º—É –¥–Ω—é

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
`/admin_test_gender` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
`/admin_simulate_course` ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∫—É—Ä—Å–∞
`/admin_help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/admin_jump_day 5` ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å
‚Ä¢ `/admin_jump_day 25` ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—É —Å –í–∏—Ç–∏–Ω–∞—Ä–∏
‚Ä¢ `/admin_set_phase 3` ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–∞–∑—É –ê–Ω–≥–≤—ã
‚Ä¢ `/admin_test_gender` ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–∞

**–ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ (/start)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥: –¥–Ω–∏ 1‚Üí4‚Üí13‚Üí17‚Üí21‚Üí25
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å 5
4. –°–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ inline-–∫–Ω–æ–ø–∫–∏

*"–° –±–æ–ª—å—à–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –ò –±–æ–ª—å—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."*

‚Äî –ê–¥–º–∏–Ω –ì–ª–∞–≤–Ω—ã–π (–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã)
"""
    
    try:
        await update.message.reply_text(help_text, parse_mode='Markdown')
        logger.info(f"–ê–¥–º–∏–Ω {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_help: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

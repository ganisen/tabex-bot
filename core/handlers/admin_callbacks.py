"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö:
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
- –°–∏–º—É–ª—è—Ü–∏—è –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
"""
import asyncio
import logging
from datetime import datetime, date, timedelta
from telegram import Update, CallbackQuery
from telegram.ext import ContextTypes

from core.models.treatment import TreatmentCourse, TreatmentStatus
from core.services.character_service import character_service
from database.repositories import UserRepository, TreatmentRepository
from config.tabex_phases import phase_manager, TABEX_PHASES_CONFIG
from .admin_commands import is_admin

logger = logging.getLogger(__name__)


async def handle_admin_gender_test_callback(query: CallbackQuery, character_id: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    Args:
        query: Callback query –æ—Ç inline –∫–Ω–æ–ø–∫–∏
        character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user = query.from_user
    
    if not is_admin(user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –∫–Ω–æ–ø–∫–∏
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_repo = UserRepository()
        user_obj = await user_repo.get_by_telegram_id(user.id)
        
        if not user_obj:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = character_service.get_character_by_name(character_id)
        if not character:
            await query.edit_message_text(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª–æ–≤
        male_texts = _generate_gender_texts(character, user_obj.first_name, "male")
        female_texts = _generate_gender_texts(character, user_obj.first_name, "female")
        
        test_result = f"""
üîß **–¢–ï–°–¢: {character.name} {character.emoji}**

üë® **–î–ª—è –º—É–∂—á–∏–Ω:**
{male_texts}

üë© **–î–ª—è –∂–µ–Ω—â–∏–Ω:**
{female_texts}

**–í—ã–≤–æ–¥—ã:**
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ø–æ–ª—É
‚Ä¢ –¢–µ–∫—Å—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ø–æ —Å—Ç–∏–ª—é –æ–±—Ä–∞—â–µ–Ω–∏—è
‚Ä¢ –ì–µ–Ω–¥–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É—á—Ç–µ–Ω—ã

*"–ö–∞–∂–¥–æ–º—É —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ."*

‚Äî –ê–¥–º–∏–Ω –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å)
"""
        
        await query.edit_message_text(test_result, parse_mode='Markdown')
        logger.info(f"–ê–¥–º–∏–Ω –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_gender_test_callback: {e}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def _generate_gender_texts(character, first_name: str, gender: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞.
    
    Args:
        character: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        gender: –ü–æ–ª ("male" –∏–ª–∏ "female")
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
    """
    try:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = character.get_greeting_message(first_name, gender)
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = character.get_reminder_message(first_name, gender, 3, 5)
        
        # –ü–æ–æ—â—Ä–µ–Ω–∏–µ
        encouragement = character.get_encouragement_message(first_name, gender, 85)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning = character.get_warning_message(first_name, gender, 2)
        
        return f"""
**–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:**
_{greeting[:100]}..._

**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**
_{reminder[:100]}..._

**–ü–æ–æ—â—Ä–µ–Ω–∏–µ:**
_{encouragement[:100]}..._

**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:**
_{warning[:100]}..._"""
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤: {str(e)[:50]}..."


async def handle_admin_simulation_callback(query: CallbackQuery, sim_type: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è.
    
    Args:
        query: Callback query –æ—Ç inline –∫–Ω–æ–ø–∫–∏
        sim_type: –¢–∏–ø —Å–∏–º—É–ª—è—Ü–∏–∏ (fast/full/characters)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user = query.from_user
    
    if not is_admin(user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞
        user_repo = UserRepository()
        treatment_repo = TreatmentRepository()
        
        user_obj = await user_repo.get_by_telegram_id(user.id)
        if not user_obj:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        course = await treatment_repo.get_active_by_user_id(user_obj.user_id)
        if not course:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        if sim_type == "fast":
            days_to_simulate = [1, 5, 13, 17, 21, 25]
            title = "üöÄ **–ë–´–°–¢–†–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø**"
        elif sim_type == "full":
            days_to_simulate = list(range(1, 26))
            title = "üìã **–ü–û–õ–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø**"
        else:  # characters
            days_to_simulate = [1, 4, 13, 17, 21, 26]  # 26 –¥–ª—è –í–∏—Ç–∏–Ω–∞—Ä–∏
            title = "üé≠ **–°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô**"
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await query.edit_message_text(
            f"{title}\n\n–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è **{user_obj.first_name}**...\n\n"
            f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {len(days_to_simulate)} –¥–Ω–µ–π –∫—É—Ä—Å–∞...",
            parse_mode='Markdown'
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞
        await asyncio.sleep(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        results = await _simulate_course_days(user_obj, course, days_to_simulate, treatment_repo)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_message = f"{title}\n\n{results}\n\n*–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*"
        
        await context.bot.send_message(
            chat_id=user.id,
            text=final_message,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω –≤—ã–ø–æ–ª–Ω–∏–ª —Å–∏–º—É–ª—è—Ü–∏—é —Ç–∏–ø–∞ {sim_type}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_simulation_callback: {e}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")


async def _simulate_course_days(user_obj, course: TreatmentCourse, days_to_simulate: list, 
                              treatment_repo: TreatmentRepository) -> str:
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –∫—É—Ä—Å–∞.
    
    Args:
        user_obj: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        course: –ö—É—Ä—Å –ª–µ—á–µ–Ω–∏—è
        days_to_simulate: –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        treatment_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫—É—Ä—Å–æ–≤ –ª–µ—á–µ–Ω–∏—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
    """
    results = []
    original_start_date = course.start_date
    
    try:
        for day in days_to_simulate:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            target_date = date.today() - timedelta(days=day - 1)
            course.start_date = target_date
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if day <= 25:
                phase_config = phase_manager.get_phase_for_day(day)
                if phase_config:
                    course.current_phase = phase_config.phase_number
                    course.current_character = phase_config.character
            else:
                # –î–µ–Ω—å 26 - —Ñ–∏–Ω–∞–ª —Å –í–∏—Ç–∏–Ω–∞—Ä–∏
                course.current_character = 'vetinari'
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            current_character = character_service.get_current_character(course)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ 5-–≥–æ –¥–Ω—è
            special_info = ""
            if day == 5:
                course.smoking_quit_date = target_date
                special_info = " üö≠ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ù–¨!"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if day == 26:
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –∞—É–¥–∏–µ–Ω—Ü–∏—è —É –í–∏—Ç–∏–Ω–∞—Ä–∏
                character_message = current_character.get_farewell_message(
                    user_obj.first_name, user_obj.gender
                )
                results.append(
                    f"üìÖ **–§–ò–ù–ê–õ** ‚Äî {current_character.name} {current_character.emoji}\n"
                    f"*{character_message[:150]}...*\n"
                )
            else:
                character_message = current_character.get_encouragement_message(
                    user_obj.first_name, user_obj.gender, 85
                )
                results.append(
                    f"üìÖ **–î–µ–Ω—å {day}** ‚Äî {current_character.name} {current_character.emoji}{special_info}\n"
                    f"*{character_message[:120]}...*\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É "–¥–Ω—è–º–∏"
            await asyncio.sleep(0.5)
        
        return "\n".join(results)
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞
        course.start_date = original_start_date
        await treatment_repo.update(course)


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤.
    
    –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç callback'—ã –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    query = update.callback_query
    user = query.from_user
    
    if not is_admin(user.id):
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        callback_data = query.data
        
        if callback_data.startswith("test_gender_"):
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_id = callback_data.replace("test_gender_", "")
            await handle_admin_gender_test_callback(query, character_id, context)
            
        elif callback_data.startswith("sim_"):
            # –°–∏–º—É–ª—è—Ü–∏—è –∫—É—Ä—Å–∞
            sim_type = callback_data.replace("sim_", "")
            await handle_admin_simulation_callback(query, sim_type, context)
            
        else:
            await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_callback: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

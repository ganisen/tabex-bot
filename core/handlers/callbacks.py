"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ Telegram-–±–æ—Ç–∞.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏,
—Ç–∞–∫–∏–µ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞ —Ç–∞–±–ª–µ—Ç–æ–∫, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
"""
import logging
from datetime import date
from telegram import Update
from telegram.ext import Application, CallbackQueryHandler, ContextTypes

from core.models.user import User
from core.models.treatment import TreatmentCourse
from core.services.reminder_service import reminder_service
from core.services.character_service import character_service
from database.repositories import UserRepository, TreatmentRepository

logger = logging.getLogger(__name__)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
    
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ
    –¥–∞–Ω–Ω—ã—Ö callback (callback_data).
    """
    query = update.callback_query
    user = update.effective_user
    callback_data = query.data
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await query.answer()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback '{callback_data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.first_name})")
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞
        if callback_data.startswith("gender_"):
            await _handle_gender_selection(query, context, callback_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–∑–∞–º–∏
        elif callback_data.startswith("dose_taken_"):
            await _handle_dose_taken(query, context, callback_data)
        elif callback_data.startswith("dose_postpone_"):
            await _handle_dose_postpone(query, context, callback_data)
        elif callback_data.startswith("dose_skip_"):
            await _handle_dose_skip(query, context, callback_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–æ–∑
        elif callback_data.startswith("catchup_taken_"):
            await _handle_catchup_taken(query, context, callback_data)
        elif callback_data.startswith("catchup_missed_"):
            await _handle_catchup_missed(query, context, callback_data)
        elif callback_data.startswith("catchup_postpone_"):
            await _handle_catchup_postpone(query, context, callback_data)
        
        elif callback_data == "placeholder":
            await query.edit_message_text("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            await query.edit_message_text(
                f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {callback_data}\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."
            )
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback '{callback_data}': {e}")
        try:
            await query.edit_message_text(
                "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è callback")


async def _handle_dose_taken(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞ —Ç–∞–±–ª–µ—Ç–∫–∏.
    
    Args:
        query: Callback query –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        callback_data: –î–∞–Ω–Ω—ã–µ callback –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dose_taken_{course_id}_{timestamp}"
    """
    user = query.from_user
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: dose_taken_123_1234567890
        parts = callback_data.split('_')
        if len(parts) != 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
            return
        
        course_id = int(parts[1])
        dose_timestamp = int(parts[2])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        response = await reminder_service.handle_dose_taken(
            user.id, course_id, dose_timestamp, context.bot
        )
        
        await query.edit_message_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∑—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def _handle_dose_postpone(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—Ä–æ—á–∫–∏ –¥–æ–∑—ã –Ω–∞ 5 –º–∏–Ω—É—Ç.
    
    Args:
        query: Callback query –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        callback_data: –î–∞–Ω–Ω—ã–µ callback –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dose_postpone_{course_id}_{timestamp}"
    """
    user = query.from_user
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data
        parts = callback_data.split('_')
        if len(parts) != 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
            return
        
        course_id = int(parts[1])
        dose_timestamp = int(parts[2])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        response = await reminder_service.handle_dose_postpone(
            user.id, course_id, dose_timestamp, context.bot
        )
        
        await query.edit_message_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Å—Ä–æ—á–∫–∏ –¥–æ–∑—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def _handle_dose_skip(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–∑—ã.
    
    Args:
        query: Callback query –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        callback_data: –î–∞–Ω–Ω—ã–µ callback –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dose_skip_{course_id}_{timestamp}"
    """
    user = query.from_user
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data
        parts = callback_data.split('_')
        if len(parts) != 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
            return
        
        course_id = int(parts[1])
        dose_timestamp = int(parts[2])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        response = await reminder_service.handle_dose_skip(
            user.id, course_id, dose_timestamp, context.bot
        )
        
        await query.edit_message_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–∑—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def _handle_catchup_taken(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞ –¥–æ–∑—ã –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞.
    
    Args:
        query: Callback query –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        callback_data: –î–∞–Ω–Ω—ã–µ callback –≤ —Ñ–æ—Ä–º–∞—Ç–µ "catchup_taken_{dose_index}"
    """
    user = query.from_user
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: catchup_taken_0
        dose_index = int(callback_data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        overdue_doses = context.user_data.get('overdue_doses', [])
        user_obj = context.user_data.get('user_obj')
        course_obj = context.user_data.get('course_obj')
        
        if not overdue_doses or not user_obj or not course_obj:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if dose_index >= len(overdue_doses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–∑—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∑—É –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        dose_schedule = overdue_doses[dose_index]
        
        from core.models.tabex_log import TabexLog, TabexLogStatus
        from database.repositories import TabexRepository
        
        tabex_repo = TabexRepository()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–Ω—è—Ç–æ–π –¥–æ–∑–µ
        tabex_log = TabexLog(
            log_id=None,
            course_id=course_obj.course_id,
            scheduled_time=dose_schedule.scheduled_time,
            actual_time=dose_schedule.scheduled_time,  # –£—Å–ª–æ–≤–Ω–æ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            status=TabexLogStatus.TAKEN.value,
            phase=dose_schedule.phase,
            character_response=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞"
        )
        await tabex_repo.create(tabex_log)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
        current_character = character_service.get_current_character(course_obj)
        response = current_character.get_dose_taken_response(user_obj.first_name, user_obj.gender)
        
        await query.edit_message_text(response, parse_mode='Markdown')
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ–∑–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await _continue_catchup_or_finish(query, context, dose_index)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∑—ã –≤ –æ–ø—Ä–æ—Å–µ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def _handle_catchup_missed(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–∑—ã –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞.
    """
    user = query.from_user
    
    try:
        dose_index = int(callback_data.split('_')[2])
        
        overdue_doses = context.user_data.get('overdue_doses', [])
        user_obj = context.user_data.get('user_obj')
        course_obj = context.user_data.get('course_obj')
        
        if not overdue_doses or not user_obj or not course_obj:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if dose_index >= len(overdue_doses):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–∑—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –¥–æ–∑–µ
        dose_schedule = overdue_doses[dose_index]
        
        from core.models.tabex_log import TabexLog, TabexLogStatus
        from database.repositories import TabexRepository
        
        tabex_repo = TabexRepository()
        
        tabex_log = TabexLog(
            log_id=None,
            course_id=course_obj.course_id,
            scheduled_time=dose_schedule.scheduled_time,
            status=TabexLogStatus.MISSED.value,
            phase=dose_schedule.phase,
            character_response=f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤ –æ–ø—Ä–æ—Å–µ)"
        )
        await tabex_repo.create(tabex_log)
        
        # –†–µ–∞–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        current_character = character_service.get_current_character(course_obj)
        response = current_character.get_dose_skipped_response(user_obj.first_name, user_obj.gender)
        
        await query.edit_message_text(response, parse_mode='Markdown')
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
        await _continue_catchup_or_finish(query, context, dose_index)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–∑—ã –≤ –æ–ø—Ä–æ—Å–µ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def _handle_catchup_postpone(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—Ä–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∑—ã –Ω–∞ 5 –º–∏–Ω—É—Ç.
    """
    user = query.from_user
    
    try:
        dose_index = int(callback_data.split('_')[2])
        
        overdue_doses = context.user_data.get('overdue_doses', [])
        user_obj = context.user_data.get('user_obj')
        course_obj = context.user_data.get('course_obj')
        first_dose_time = context.user_data.get('first_dose_time')
        
        if not overdue_doses or not user_obj or not course_obj:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–∑–∞ –¥–ª—è –æ—Ç—Å—Ä–æ—á–∫–∏
        if dose_index != len(overdue_doses) - 1:
            await query.edit_message_text("‚ùå –û—Ç—Å—Ä–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–∑—ã")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π
        current_character = character_service.get_current_character(course_obj)
        response = current_character.get_dose_postponed_response(user_obj.first_name, user_obj.gender)
        
        await query.edit_message_text(response, parse_mode='Markdown')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–∑ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (–æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
        await _finish_catchup_and_start_program(query, context, postpone_last=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Å—Ä–æ—á–∫–∏ –¥–æ–∑—ã –≤ –æ–ø—Ä–æ—Å–µ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def _continue_catchup_or_finish(query, context: ContextTypes.DEFAULT_TYPE, current_dose_index: int) -> None:
    """
    –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ.
    """
    try:
        overdue_doses = context.user_data.get('overdue_doses', [])
        next_index = current_dose_index + 1
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –¥–æ–∑–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
        if next_index < len(overdue_doses):
            user_obj = context.user_data.get('user_obj')
            current_character = character_service.get_current_character(context.user_data.get('course_obj'))
            
            await _ask_about_next_dose(query, context, user_obj, overdue_doses[next_index], 
                                     next_index, len(overdue_doses), current_character)
        else:
            # –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            await _finish_catchup_and_start_program(query, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")


async def _ask_about_next_dose(query, context: ContextTypes.DEFAULT_TYPE,
                              user_obj: User, dose_schedule, dose_index: int, 
                              total_doses: int, current_character) -> None:
    """
    –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ–∑–µ (–¥–ª—è callback'–æ–≤).
    """
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    try:
        gender_pronoun = "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω" if user_obj.is_male() else "–≥—Ä–∞–∂–¥–∞–Ω–∫–∞"
        dose_time = dose_schedule.scheduled_time.strftime("%H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–∑–∞ –∏–ª–∏ –Ω–µ—Ç
        is_last_dose = (dose_index == total_doses - 1)
        
        question_message = f"""
{current_character.emoji} **–î–æ–ø—Ä–æ—Å #{dose_index + 1}/{total_doses}**

{gender_pronoun.title()} {user_obj.first_name}, —á—Ç–æ –±—ã–ª–æ –≤ **{dose_time}**?

‚è∞ **–î–æ–∑–∞ ‚Ññ{dose_schedule.dose_number} ({dose_schedule.day}-–π –¥–µ–Ω—å)**

–û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ - {current_character.name} –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—Å—ë –≤—ã—è—Å–Ω–∏—Ç!

*"–ü—Ä–∞–≤–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞—Ä—É–∂—É —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ."*
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        buttons.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª(–∞)", callback_data=f"catchup_taken_{dose_index}")])
        buttons.append([InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å–∫", callback_data=f"catchup_missed_{dose_index}")])
        
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–∑—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç—Å—Ä–æ—á–∫–∏
        if is_last_dose:
            buttons.append([InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω", callback_data=f"catchup_postpone_{dose_index}")])
        
        keyboard = InlineKeyboardMarkup(buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (query.edit –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        await query.message.reply_text(
            question_message,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ–∑–µ: {e}")


async def _finish_catchup_and_start_program(query, context: ContextTypes.DEFAULT_TYPE, postpone_last: bool = False) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.
    """
    try:
        from core.services.reminder_service import reminder_service
        
        user_obj = context.user_data.get('user_obj')
        course_obj = context.user_data.get('course_obj')
        first_dose_time = context.user_data.get('first_dose_time')
        
        if not user_obj or not course_obj or not first_dose_time:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞
        context.user_data['catchup_mode'] = False
        context.user_data.pop('overdue_doses', None)
        context.user_data.pop('current_catchup_index', None)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        current_character = character_service.get_current_character(course_obj)
        gender_pronoun = "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω" if user_obj.is_male() else "–≥—Ä–∞–∂–¥–∞–Ω–∫–∞"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞
        completion_message = f"""
{current_character.emoji} **–î–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω, {gender_pronoun} {user_obj.first_name}!**

{current_character.name} –∑–∞–ø–∏—Å–∞–ª –≤—Å–µ –æ—Ç–≤–µ—Ç—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.

**–í—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–æ–∑—ã —É—á—Ç–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.**

{"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (–æ—Ç—Å—Ä–æ—á–∫–∞)." if postpone_last else "‚è∞ –°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Ñ–∞–∑."}

*"–ü—Ä–æ—à–ª–æ–µ —É—á—Ç–µ–Ω–æ. –ë—É–¥—É—â–µ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–±—è."*

‚Äî {current_character.name} (–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞)

**–ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.**
"""
        
        await query.message.reply_text(
            completion_message,
            parse_mode='Markdown'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        success = await reminder_service.start_reminders_for_user(
            query.from_user.id, first_dose_time, context.bot
        )
        
        if postpone_last:
            # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—Ç—Å—Ä–æ—á–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            from datetime import datetime, timedelta
            postponed_time = datetime.now() + timedelta(minutes=5)
            reminder_service.postponed_reminders[query.from_user.id] = postponed_time
        
        if success:
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")


async def _handle_gender_selection(query, context: ContextTypes.DEFAULT_TYPE, callback_data: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        query: Callback query –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        callback_data: –î–∞–Ω–Ω—ã–µ callback –≤ —Ñ–æ—Ä–º–∞—Ç–µ "gender_{male|female}_{user_id}"
    """
    user = query.from_user
    
    # –ü–∞—Ä—Å–∏–º callback_data: gender_male_123456 –∏–ª–∏ gender_female_123456
    parts = callback_data.split('_')
    if len(parts) != 3:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
        await query.edit_message_text("üê∫ –†—Ä—Ä—Ä! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º!")
        return
    
    gender = parts[1]  # male –∏–ª–∏ female
    expected_user_id = int(parts[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id != expected_user_id:
        await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –≤—ã–±–æ—Ä!", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_repo = UserRepository()
        
        new_user = User(
            user_id=None,
            telegram_id=user.id,
            first_name=user.first_name,
            username=user.username,
            gender=gender
        )
        
        created_user = await user_repo.create(new_user)
        
        # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å –ª–µ—á–µ–Ω–∏—è
        treatment_repo = TreatmentRepository()
        
        new_course = TreatmentCourse(
            course_id=None,
            user_id=created_user.user_id,
            start_date=date.today(),
            current_phase=1,
            current_character='gaspode'
        )
        
        created_course = await treatment_repo.create(new_course)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_character = character_service.get_character_by_name('gaspode')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ì–∞—Å–ø–æ–¥–∞
        if current_character:
            gaspode_greeting = current_character.get_greeting_message(user.first_name, gender)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            time_instruction = f"""

üìù **–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–µ—Ç–∫–∏:**
–ö–æ–≥–¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω—è–ª{'' if gender == 'male' else '–∞'} –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–µ—Ç–∫—É –¢–∞–±–µ–∫—Å–∞?
–§–æ—Ä–º–∞—Ç: **–ß–ß:–ú–ú** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:30 –∏–ª–∏ 14:15)

*"–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –æ—Å–Ω–æ–≤–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!"*

‚Äî –ì–∞—Å–ø–æ–¥ (–≥–æ—Ç–æ–≤ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–µ–∂–∏–º–æ–º)"""
            
            gaspode_registered = gaspode_greeting + time_instruction
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            gender_display = "–º—É–∂—á–∏–Ω–∞" if gender == "male" else "–∂–µ–Ω—â–∏–Ω–∞"
            gender_pronoun = "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω" if gender == "male" else "–≥—Ä–∞–∂–¥–∞–Ω–∫–∞"
            
            gaspode_registered = f"""
üê∫ **–û—Ç–ª–∏—á–Ω–æ, {gender_pronoun} {user.first_name}!**

–ì–∞—Å–ø–æ–¥ –∑–∞–ø–∏—Å–∞–ª: {gender_display}. –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –°—Ç—Ä–∞–∂–∏.

**–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–¢–∞–±–µ–∫—Å" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

üìù **–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–µ—Ç–∫–∏:**
–ö–æ–≥–¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω—è–ª –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–µ—Ç–∫—É –¢–∞–±–µ–∫—Å–∞?
–§–æ—Ä–º–∞—Ç: **–ß–ß:–ú–ú** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:30 –∏–ª–∏ 14:15)

*"–ó–∞–∫–æ–Ω - –æ–Ω –∫–∞–∫ —Ç–∞–±–∞–∫. –ë—Ä–æ—Å–∏—Ç—å —Ç—è–∂–µ–ª–æ, –Ω–æ –Ω–∞–¥–æ."*

‚Äî –ì–∞—Å–ø–æ–¥ (–∑–∞–ø–∏—Å–∞–ª –≤—Å—ë –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª)
"""
        
        await query.edit_message_text(gaspode_registered, parse_mode='Markdown')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        context.user_data['awaiting_first_dose_time'] = True
        context.user_data['user_obj'] = created_user
        context.user_data['course_obj'] = created_course
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {created_user} —Å –≥–µ–Ω–¥–µ—Ä–æ–º {gender} –∏ –∫—É—Ä—Å –ª–µ—á–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞: {e}")
        await query.edit_message_text(
            "üê∫ –†—Ä—Ä—Ä! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –°—Ç—Ä–∞–∂–∏! "
            "–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑."
        )


def setup_callback_handlers(app: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    
    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Application –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers
    """
    try:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        app.add_handler(CallbackQueryHandler(button_callback))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback: {e}")
        raise

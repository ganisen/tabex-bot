"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¢–∞–±–µ–∫—Å.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏
–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
"""
import asyncio
import logging
from telegram import Update
from telegram.ext import Application, ContextTypes
from telegram.constants import ParseMode

from config.settings import settings
from core.handlers.commands import setup_command_handlers
from core.handlers.callbacks import setup_callback_handlers
from database.connection import init_database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('tabex_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class TabexBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¢–∞–±–µ–∫—Å–µ.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.app = None
        self.is_running = False
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞...")
    
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
            self.app = (
                Application.builder()
                .token(settings.bot_token)
                .build()
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            setup_command_handlers(self.app)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            setup_callback_handlers(self.app)
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        if self.is_running:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞")
            return
        
        try:
            await self.setup()
            
            logger.info("–ó–∞–ø—É—Å–∫ –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫ polling —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            await self.app.initialize()
            await self.app.start()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.app.add_error_handler(error_handler)
            
            # –ó–∞–ø—É—Å–∫ polling —Å —Å–±—Ä–æ—Å–æ–º pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await self.app.updater.start_polling(
                drop_pending_updates=True,
                poll_interval=1.0,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                timeout=10,         # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
                bootstrap_retries=3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            )
            
            self.is_running = True
            logger.info("–¢–∞–±–µ–∫—Å-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            await self.stop()
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è graceful shutdown."""
        if not self.is_running:
            return
        
        self.is_running = False
        
        try:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞...")
            
            if self.app and self.app.updater:
                try:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    await asyncio.wait_for(
                        self.app.updater.stop(),
                        timeout=10.0
                    )
                    logger.info("Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ updater'–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ updater'–∞: {e}")
            
            if self.app:
                try:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    await asyncio.wait_for(
                        self.app.stop(),
                        timeout=5.0
                    )
                    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
                
                try:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    await asyncio.wait_for(
                        self.app.shutdown(),
                        timeout=5.0
                    )
                    logger.info("Shutdown –∑–∞–≤–µ—Ä—à—ë–Ω")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ shutdown –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown: {e}")
            
            logger.info("–¢–∞–±–µ–∫—Å-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            self.is_running = False
    
    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
        try:
            await self.start()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            while self.is_running:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.stop()


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    
    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(update, Update) and update.message:
        try:
            await update.message.reply_text(
                "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

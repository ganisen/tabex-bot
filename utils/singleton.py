"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
—á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º PID-—Ñ–∞–π–ª–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
"""
import os
import sys
import fcntl
import tempfile
import logging
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)


class SingletonLock:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
    –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    """
    
    def __init__(self, lock_name: str = "tabex-bot"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        
        Args:
            lock_name: –ò–º—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        self.lock_name = lock_name
        self.lock_file_path = None
        self.lock_file = None
    
    def __enter__(self):
        """–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        return self.acquire()
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        self.release()
    
    def acquire(self) -> bool:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        
        Returns:
            True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if os.getenv('DOCKER_CONTAINER'):
                # –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp
                lock_dir = Path("/tmp")
            else:
                # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
                lock_dir = Path(__file__).parent.parent / "data"
                lock_dir.mkdir(exist_ok=True)
            
            self.lock_file_path = lock_dir / f"{self.lock_name}.lock"
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
            self.lock_file = open(self.lock_file_path, 'w')
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            fcntl.lockf(self.lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            self.lock_file.write(str(os.getpid()))
            self.lock_file.flush()
            
            logger.info(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {self.lock_name} –∑–∞—Ö–≤–∞—á–µ–Ω–∞ (PID: {os.getpid()})")
            return True
            
        except (IOError, OSError) as e:
            # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.lock_file:
                self.lock_file.close()
                self.lock_file = None
            
            # –ß–∏—Ç–∞–µ–º PID —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            existing_pid = self._get_existing_pid()
            if existing_pid:
                logger.error(f"–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä {self.lock_name} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {existing_pid})")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É {self.lock_name}: {e}")
            
            return False
    
    def release(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        if self.lock_file:
            try:
                fcntl.lockf(self.lock_file.fileno(), fcntl.LOCK_UN)
                self.lock_file.close()
                logger.info(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {self.lock_name} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            finally:
                self.lock_file = None
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if self.lock_file_path and self.lock_file_path.exists():
            try:
                self.lock_file_path.unlink()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def _get_existing_pid(self) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç PID —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        
        Returns:
            PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å
        """
        if not self.lock_file_path or not self.lock_file_path.exists():
            return None
        
        try:
            with open(self.lock_file_path, 'r') as f:
                pid_str = f.read().strip()
                if pid_str.isdigit():
                    return int(pid_str)
        except Exception:
            pass
        
        return None
    
    def is_process_running(self, pid: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID.
        
        Args:
            pid: ID –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, False –∏–Ω–∞—á–µ
        """
        try:
            os.kill(pid, 0)  # –°–∏–≥–Ω–∞–ª 0 –Ω–µ —É–±–∏–≤–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
            return True
        except OSError:
            return False


def ensure_single_instance(app_name: str = "tabex-bot") -> SingletonLock:
    """
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Args:
        app_name: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        
    Returns:
        SingletonLock –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        
    Raises:
        SystemExit: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    """
    lock = SingletonLock(app_name)
    
    if not lock.acquire():
        print(f"\n‚ùå –û—à–∏–±–∫–∞: —ç–∫–∑–µ–º–ø–ª—è—Ä {app_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        print("üí° –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞")
        print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose down")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: docker-compose up")
        print()
        sys.exit(1)
    
    return lock


def cleanup_stale_locks(app_name: str = "tabex-bot"):
    """
    –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤).
    
    Args:
        app_name: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if os.getenv('DOCKER_CONTAINER'):
            lock_dir = Path("/tmp")
        else:
            lock_dir = Path(__file__).parent.parent / "data"
        
        lock_file_path = lock_dir / f"{app_name}.lock"
        
        if not lock_file_path.exists():
            return
        
        # –ß–∏—Ç–∞–µ–º PID –∏–∑ —Ñ–∞–π–ª–∞
        with open(lock_file_path, 'r') as f:
            pid_str = f.read().strip()
        
        if not pid_str.isdigit():
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            lock_file_path.unlink()
            logger.info("–£–¥–∞–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            return
        
        pid = int(pid_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        try:
            os.kill(pid, 0)
            # –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            logger.info(f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å {app_name} (PID: {pid})")
        except OSError:
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            lock_file_path.unlink()
            logger.info(f"–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (PID: {pid})")
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")

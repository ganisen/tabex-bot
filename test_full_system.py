#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞.

–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –∏ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞,
–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π 5-–π –¥–µ–Ω—å
–∏ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

–ó–∞–ø—É—Å–∫: python test_full_system.py
"""
import asyncio
import logging
import sys
from datetime import datetime, date, timedelta
from pathlib import Path
from typing import List, Dict, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.models.user import User
from core.models.treatment import TreatmentCourse, TreatmentStatus
from core.models.tabex_log import TabexLog, TabexLogStatus
from core.services.character_service import character_service
from core.services.schedule_service import schedule_service
from database.repositories import UserRepository, TreatmentRepository, TabexRepository
from database.connection import init_database
from config.tabex_phases import phase_manager, TABEX_PHASES_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_results.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class SystemTester:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞.
    
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
    - –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö 25 –¥–Ω–µ–π –∫—É—Ä—Å–∞
    - –°–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —Ñ–∞–∑–∞–º
    - –ì–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ç–µ–∫—Å—Ç–∞—Ö
    - –†–∞—Å—á–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞
    - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π 5-–π –¥–µ–Ω—å
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
        self.user_repo = UserRepository()
        self.treatment_repo = TreatmentRepository()
        self.tabex_repo = TabexRepository()
        self.test_results = []
        self.errors = []
    
    async def run_full_test_suite(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await init_database()
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("üë® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            male_results = await self._test_full_course("male")
            
            # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("üë© –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")  
            female_results = await self._test_full_course("female")
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
            logger.info("üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            character_results = await self._test_character_transitions()
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ 5-–≥–æ –¥–Ω—è
            logger.info("üö≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ 5-–≥–æ –¥–Ω—è")
            critical_day_results = await self._test_critical_day()
            
            # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            logger.info("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            schedule_results = await self._test_schedule_calculation()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            await self._generate_test_report(
                male_results, female_results, character_results, 
                critical_day_results, schedule_results
            )
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            self.errors.append(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    
    async def _test_full_course(self, gender: str) -> Dict[str, any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞.
        
        Args:
            gender: –ü–æ–ª —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("male" –∏–ª–∏ "female")
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        results = {
            "gender": gender,
            "days_tested": [],
            "character_changes": [],
            "phase_transitions": [],
            "errors": []
        }
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user_id = 999999001 if gender == "male" else 999999002
            first_name = "–¢–µ—Å—Ç_–ú—É–∂—á–∏–Ω–∞" if gender == "male" else "–¢–µ—Å—Ç_–ñ–µ–Ω—â–∏–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await self.user_repo.get_by_telegram_id(test_user_id)
            if existing_user:
                await self._cleanup_test_user(existing_user.user_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                user_id=None,
                telegram_id=test_user_id,
                first_name=first_name,
                username=f"test_{gender}",
                gender=gender,
                timezone="Europe/Moscow"
            )
            test_user = await self.user_repo.create(test_user)
            
            # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å –ª–µ—á–µ–Ω–∏—è
            test_course = TreatmentCourse(
                course_id=None,
                user_id=test_user.user_id,
                start_date=date.today(),
                current_phase=1,
                current_character='gaspode'
            )
            test_course = await self.treatment_repo.create(test_course)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫—É—Ä—Å–∞
            for day in range(1, 26):
                day_result = await self._test_single_day(
                    test_user, test_course, day, results
                )
                results["days_tested"].append(day_result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É "–¥–Ω—è–º–∏"
                await asyncio.sleep(0.1)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞—É–¥–∏–µ–Ω—Ü–∏—é (–¥–µ–Ω—å 26)
            final_result = await self._test_final_audience(test_user, test_course)
            results["final_audience"] = final_result
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await self._cleanup_test_user(test_user.user_id)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–ª—è {gender}: {e}"
            logger.error(error_msg)
            results["errors"].append(error_msg)
        
        return results
    
    async def _test_single_day(self, user: User, course: TreatmentCourse, day: int, results: Dict) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å –∫—É—Ä—Å–∞ –ª–µ—á–µ–Ω–∏—è.
        
        Args:
            user: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            course: –ö—É—Ä—Å –ª–µ—á–µ–Ω–∏—è
            day: –ù–æ–º–µ—Ä –¥–Ω—è (1-25)
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è
        """
        day_result = {
            "day": day,
            "phase": None,
            "character": None,
            "character_message": None,
            "schedule_test": None,
            "errors": []
        }
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∫—É—Ä—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            course.start_date = date.today() - timedelta(days=day - 1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            phase_config = phase_manager.get_phase_for_day(day)
            if phase_config:
                old_phase = course.current_phase
                old_character = course.current_character
                
                course.current_phase = phase_config.phase_number
                course.current_character = phase_config.character
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
                if old_phase != course.current_phase:
                    results["phase_transitions"].append({
                        "day": day,
                        "from_phase": old_phase,
                        "to_phase": course.current_phase
                    })
                
                if old_character != course.current_character:
                    results["character_changes"].append({
                        "day": day,
                        "from_character": old_character,
                        "to_character": course.current_character
                    })
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            current_character = character_service.get_current_character(course)
            day_result["phase"] = course.current_phase
            day_result["character"] = current_character.name
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            try:
                greeting = current_character.get_greeting_message(user.first_name, user.gender)
                reminder = current_character.get_reminder_message(user.first_name, user.gender, 1, day)
                encouragement = current_character.get_encouragement_message(user.first_name, user.gender, 85)
                
                day_result["character_message"] = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {len(greeting)} —Å–∏–º–≤–æ–ª–æ–≤, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {len(reminder)} —Å–∏–º–≤–æ–ª–æ–≤"
                
            except Exception as e:
                day_result["errors"].append(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try:
                daily_schedule = schedule_service.calculate_daily_schedule(course, "09:00", day)
                day_result["schedule_test"] = {
                    "doses_count": len(daily_schedule),
                    "expected_count": phase_config.doses_per_day if phase_config else 0,
                    "interval_hours": phase_config.interval_hours if phase_config else 0
                }
                
                if len(daily_schedule) != (phase_config.doses_per_day if phase_config else 0):
                    day_result["errors"].append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑: –æ–∂–∏–¥–∞–µ—Ç—Å—è {phase_config.doses_per_day}, –ø–æ–ª—É—á–µ–Ω–æ {len(daily_schedule)}")
                    
            except Exception as e:
                day_result["errors"].append(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ 5-–≥–æ –¥–Ω—è
            if day == 5:
                if not course.smoking_quit_date:
                    course.smoking_quit_date = course.start_date + timedelta(days=4)
                    await self.treatment_repo.update(course)
                
                day_result["critical_day"] = True
                day_result["quit_smoking_date"] = str(course.smoking_quit_date)
        
        except Exception as e:
            day_result["errors"].append(f"–û—à–∏–±–∫–∞ –¥–Ω—è {day}: {e}")
        
        return day_result
    
    async def _test_final_audience(self, user: User, course: TreatmentCourse) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞—É–¥–∏–µ–Ω—Ü–∏—é —É –í–∏—Ç–∏–Ω–∞—Ä–∏.
        
        Args:
            user: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            course: –ö—É—Ä—Å –ª–µ—á–µ–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª–∞
        """
        result = {
            "character": "vetinari",
            "message_generated": False,
            "course_completed": False,
            "errors": []
        }
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –í–∏—Ç–∏–Ω–∞—Ä–∏
            course.current_character = 'vetinari'
            course.status = TreatmentStatus.COMPLETED.value
            
            # –ü–æ–ª—É—á–∞–µ–º –í–∏—Ç–∏–Ω–∞—Ä–∏
            vetinari = character_service.get_character_by_name('vetinari')
            if not vetinari:
                result["errors"].append("–ü–µ—Ä—Å–æ–Ω–∞–∂ –í–∏—Ç–∏–Ω–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return result
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            farewell_message = vetinari.get_farewell_message(user.first_name, user.gender)
            
            result["message_generated"] = len(farewell_message) > 0
            result["course_completed"] = True
            result["farewell_message_length"] = len(farewell_message)
            
        except Exception as e:
            result["errors"].append(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞—É–¥–∏–µ–Ω—Ü–∏–∏: {e}")
        
        return result
    
    async def _test_character_transitions(self) -> List[Dict]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        """
        transitions = []
        expected_transitions = [
            (1, 'gaspode'),
            (4, 'nobby_colon'),
            (13, 'angua'),
            (17, 'carrot'),
            (21, 'vimes'),
            (26, 'vetinari')  # —Ñ–∏–Ω–∞–ª
        ]
        
        for day, expected_character in expected_transitions:
            result = {
                "day": day,
                "expected_character": expected_character,
                "actual_character": None,
                "correct": False
            }
            
            try:
                if day <= 25:
                    phase_config = phase_manager.get_phase_for_day(day)
                    if phase_config:
                        result["actual_character"] = phase_config.character
                        result["correct"] = phase_config.character == expected_character
                else:
                    # –î–µ–Ω—å 26 - –í–∏—Ç–∏–Ω–∞—Ä–∏
                    result["actual_character"] = "vetinari"
                    result["correct"] = True
                
            except Exception as e:
                result["error"] = str(e)
            
            transitions.append(result)
        
        return transitions
    
    async def _test_critical_day(self) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π 5-–π –¥–µ–Ω—å - –ø–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ –æ—Ç –∫—É—Ä–µ–Ω–∏—è.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω—è
        """
        result = {
            "day_5_is_critical": False,
            "quit_smoking_logic": False,
            "character_response": False,
            "errors": []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å 5 —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
            result["day_5_is_critical"] = phase_manager.is_critical_day(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è
            test_date = date.today()
            expected_quit_date = test_date + timedelta(days=4)  # 5-–π –¥–µ–Ω—å –∫—É—Ä—Å–∞
            
            result["quit_smoking_logic"] = True  # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –µ—Å–ª–∏ –¥–µ–Ω—å 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –®–Ω–æ–±–±–∏ –∏ –ö–æ–ª–æ–Ω–∞ –¥–ª—è 5-–≥–æ –¥–Ω—è
            nobby_colon = character_service.get_character_by_name('nobby_colon')
            if nobby_colon:
                critical_message = nobby_colon.get_reminder_message("–¢–µ—Å—Ç", "male", 1, 5)
                result["character_response"] = len(critical_message) > 0
            
        except Exception as e:
            result["errors"].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω—è: {e}")
        
        return result
    
    async def _test_schedule_calculation(self) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∑.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        result = {
            "phases_tested": [],
            "total_errors": 0,
            "summary": {}
        }
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å
            test_course = TreatmentCourse(
                course_id=999999,
                user_id=999999,
                start_date=date.today(),
                current_phase=1,
                current_character='gaspode'
            )
            
            for phase_num, phase_config in TABEX_PHASES_CONFIG.items():
                phase_result = {
                    "phase": phase_num,
                    "expected_doses": phase_config.doses_per_day,
                    "expected_interval": phase_config.interval_hours,
                    "actual_doses": 0,
                    "schedule_generated": False,
                    "errors": []
                }
                
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É
                    test_course.current_phase = phase_num
                    test_course.current_character = phase_config.character
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–Ω—è —Ñ–∞–∑—ã
                    test_day = phase_config.day_range[0] + 1
                    daily_schedule = schedule_service.calculate_daily_schedule(test_course, "09:00", test_day)
                    
                    phase_result["actual_doses"] = len(daily_schedule)
                    phase_result["schedule_generated"] = len(daily_schedule) > 0
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∑
                    if phase_result["actual_doses"] != phase_result["expected_doses"]:
                        error_msg = f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑ –≤ —Ñ–∞–∑–µ {phase_num}"
                        phase_result["errors"].append(error_msg)
                        result["total_errors"] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –¥–æ–∑–∞–º–∏
                    if len(daily_schedule) > 1:
                        actual_interval = (daily_schedule[1].scheduled_time - daily_schedule[0].scheduled_time).total_seconds() / 3600
                        expected_interval = phase_config.interval_hours
                        
                        if abs(actual_interval - expected_interval) > 0.1:  # –î–æ–ø—É—Å–∫ 0.1 —á–∞—Å–∞
                            error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–∞–∑–µ {phase_num}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_interval}—á, –ø–æ–ª—É—á–µ–Ω–æ {actual_interval:.1f}—á"
                            phase_result["errors"].append(error_msg)
                            result["total_errors"] += 1
                
                except Exception as e:
                    phase_result["errors"].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∑—ã {phase_num}: {e}")
                    result["total_errors"] += 1
                
                result["phases_tested"].append(phase_result)
            
            # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            result["summary"] = {
                "total_phases": len(TABEX_PHASES_CONFIG),
                "successful_phases": len([p for p in result["phases_tested"] if not p["errors"]]),
                "failed_phases": len([p for p in result["phases_tested"] if p["errors"]]),
                "total_errors": result["total_errors"]
            }
            
        except Exception as e:
            result["critical_error"] = str(e)
        
        return result
    
    async def _cleanup_test_user(self, user_id: int) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–µ–º–æ–≤
            await self.tabex_repo.delete_all_logs_for_user(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å—ã
            await self.treatment_repo.delete_all_by_user_id(user_id)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.user_repo.delete(user_id)
            
            logger.info(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _generate_test_report(self, male_results: Dict, female_results: Dict, 
                                  character_results: List, critical_day_results: Dict,
                                  schedule_results: Dict) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
        
        Args:
            male_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            female_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            character_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            critical_day_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω—è
            schedule_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        report = f"""
{'='*60}
üß™ –û–¢–ß–ï–¢ –û –ü–û–õ–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ –¢–ê–ë–ï–ö–°-–ë–û–¢–ê
{'='*60}

üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üë® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–ñ–°–ö–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {len(male_results.get('days_tested', []))}
   ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(male_results.get('character_changes', []))}
   ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥—ã —Ñ–∞–∑: {len(male_results.get('phase_transitions', []))}
   ‚Ä¢ –û—à–∏–±–∫–∏: {len(male_results.get('errors', []))}

üë© –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ñ–ï–ù–°–ö–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {len(female_results.get('days_tested', []))}
   ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(female_results.get('character_changes', []))}
   ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥—ã —Ñ–∞–∑: {len(female_results.get('phase_transitions', []))}
   ‚Ä¢ –û—à–∏–±–∫–∏: {len(female_results.get('errors', []))}

üé≠ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–•–û–î–û–í –ü–ï–†–°–û–ù–ê–ñ–ï–ô:
   ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(character_results)}
   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {len([t for t in character_results if t.get('correct', False)])}
   ‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {len([t for t in character_results if not t.get('correct', False)])}

üö≠ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô 5-–ô –î–ï–ù–¨:
   ‚Ä¢ –î–µ–Ω—å 5 —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: {'‚úÖ' if critical_day_results.get('day_5_is_critical') else '‚ùå'}
   ‚Ä¢ –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è: {'‚úÖ' if critical_day_results.get('quit_smoking_logic') else '‚ùå'}
   ‚Ä¢ –†–µ–∞–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {'‚úÖ' if critical_day_results.get('character_response') else '‚ùå'}
   ‚Ä¢ –û—à–∏–±–∫–∏: {len(critical_day_results.get('errors', []))}

‚è∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø:
   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–∑: {schedule_results.get('summary', {}).get('total_phases', 0)}
   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Ñ–∞–∑: {schedule_results.get('summary', {}).get('successful_phases', 0)}
   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–∑: {schedule_results.get('summary', {}).get('failed_phases', 0)}
   ‚Ä¢ –û–±—â–∏—Ö –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_results.get('total_errors', 0)}

{'='*60}
‚úÖ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {'–ü–†–û–®–õ–û' if self._is_test_passed(male_results, female_results, character_results, critical_day_results, schedule_results) else '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}
{'='*60}

üìù –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        all_errors = []
        all_errors.extend(male_results.get('errors', []))
        all_errors.extend(female_results.get('errors', []))
        all_errors.extend(critical_day_results.get('errors', []))
        
        if all_errors:
            for error in all_errors:
                report += f"   ‚ùå {error}\n"
        else:
            report += "   üéâ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        with open('test_report.txt', 'w', encoding='utf-8') as f:
            f.write(report)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        logger.info("–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.txt")
    
    def _is_test_passed(self, male_results: Dict, female_results: Dict, 
                       character_results: List, critical_day_results: Dict,
                       schedule_results: Dict) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.
        
        Returns:
            True, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_errors = 0
        
        # –û—à–∏–±–∫–∏ –≤ –∫—É—Ä—Å–∞—Ö
        critical_errors += len(male_results.get('errors', []))
        critical_errors += len(female_results.get('errors', []))
        
        # –û—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        critical_errors += len([t for t in character_results if not t.get('correct', False)])
        
        # –û—à–∏–±–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω—è
        critical_errors += len(critical_day_results.get('errors', []))
        
        # –û—à–∏–±–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        critical_errors += schedule_results.get('total_errors', 0)
        
        return critical_errors == 0


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞...")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n")
    
    tester = SystemTester()
    await tester.run_full_test_suite()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª—ã test_report.txt –∏ test_results.log")


if __name__ == "__main__":
    asyncio.run(main())

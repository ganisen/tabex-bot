#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞
# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ—á–∏—â–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

set -e

echo "üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¢–∞–±–µ–∫—Å-–±–æ—Ç–∞..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
print_status $YELLOW "üì¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∏–º–µ–Ω–µ–º tabex-bot
docker ps -q --filter "name=tabex-bot" | while read container_id; do
    if [ ! -z "$container_id" ]; then
        print_status $YELLOW "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_id"
        docker stop "$container_id" || true
    fi
done

# –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker ps -a -q --filter "name=tabex-bot" | while read container_id; do
    if [ ! -z "$container_id" ]; then
        print_status $YELLOW "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_id"
        docker rm "$container_id" || true
    fi
done

# 2. Docker Compose cleanup
if [ -f "docker-compose.yaml" ]; then
    print_status $YELLOW "üê≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Docker Compose..."
    docker-compose down --remove-orphans || true
fi

# 3. –û—á–∏—Å—Ç–∫–∞ lock —Ñ–∞–π–ª–æ–≤
print_status $YELLOW "üîí –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫..."

# –õ–æ–∫–∞–ª—å–Ω—ã–µ lock —Ñ–∞–π–ª—ã
if [ -f "data/tabex-bot.lock" ]; then
    rm -f "data/tabex-bot.lock"
    print_status $GREEN "–£–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π lock —Ñ–∞–π–ª"
fi

# Lock —Ñ–∞–π–ª—ã –≤ /tmp (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∞–º–∏)
if [ -f "/tmp/tabex-bot.lock" ]; then
    rm -f "/tmp/tabex-bot.lock" 2>/dev/null || true
    print_status $GREEN "–£–¥–∞–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π lock —Ñ–∞–π–ª"
fi

# 4. –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
print_status $YELLOW "üîç –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."

# –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å main.py –∏–ª–∏ tabex
python_processes=$(ps aux | grep -E "(main\.py|tabex.*bot)" | grep -v grep | grep -v cleanup || true)

if [ ! -z "$python_processes" ]; then
    print_status $RED "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã Python:"
    echo "$python_processes"
    
    echo ""
    read -p "–•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ps aux | grep -E "(main\.py|tabex.*bot)" | grep -v grep | grep -v cleanup | awk '{print $2}' | while read pid; do
            if [ ! -z "$pid" ]; then
                print_status $YELLOW "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: $pid"
                kill -TERM "$pid" 2>/dev/null || true
                sleep 2
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                kill -KILL "$pid" 2>/dev/null || true
            fi
        done
    fi
else
    print_status $GREEN "‚úÖ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# 5. –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if [ "$1" = "--clear-logs" ]; then
    print_status $YELLOW "üìù –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤..."
    if [ -f "tabex_bot.log" ]; then
        > tabex_bot.log
        print_status $GREEN "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
    fi
fi

print_status $GREEN "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

echo ""
echo "üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:"
echo "   docker-compose up tabex-bot"
echo "   –∏–ª–∏"
echo "   python main.py"
echo ""
